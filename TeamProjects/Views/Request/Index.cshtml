@model IEnumerable<TeamProjects.Models.timetable_request>
@{
    ViewBag.Title = "Request List";
    string department = "CO";
}
@section Includes{
    <link href="@Url.Content("/Content/Request.css")" rel="stylesheet" />
}
<script type="text/javascript">
    window.onload = function () {
        //initialize tablesorter
        $(".RequestTable").tablesorter({sortList: [[9,1]]}); 
        //TODO - Change period->time mapping to use database, so then mapping can be changed
        function getTime(period) {
            switch (period) {
                case 1:
                    time = "09:00";
                    break;
                case 2:
                    time = "10:00";
                    break;
                case 3:
                    time = "11:00";
                    break;
                case 4:
                    time = "12:00";
                    break;
                case 5:
                    time = "13:00";
                    break;
                case 6:
                    time = "14:00";
                    break;
                case 7:
                    time = "15:00";
                    break;
                case 8:
                    time = "16:00";
                    break;
                case 9:
                    time = "17:00";
                    break;
                case 10:
                    time = "18:00";
                    break;
            }
            return time;
        }
        function parkIDtoPark(parkID){
                $.getJSON("@Url.Action("ParkAPI", "api", null, Request.Url.Scheme)"+"?deptCode=@User.Identity.Name&modCode="+String($(this).find('.requestModCode').attr('data-modCode')))
                .done(function (data) {
                    $(".detailsrow td").prepend("<div class='detailsheader'>Module Title</div><div class='detailscontent'>"+data.Module_Title+"</div>");
                })
                .fail(function (jqXHR, textStatus, err){
                    console.log('Error: ' + err);
                });            
        }
        function refineResults() {
            //Initially hide "no results" indicator
            //Will be shown if needed at the end of the refinement function
            $(".noresults").remove();
            //Get array of rounds to be shown
            var rounds = new Array();
            $(".roundsOptions input:checked").each(function () {
                rounds.push(parseInt(this.className.split("-")[1]));
            });
            //Limit the rounds being displayed
            $(".requestRound").each(function () {
                if (rounds.indexOf(parseInt($(this).text())) == -1) {
                    $(this).parent().removeClass("showrow").addClass("hiderow");
                } else {
                    $(this).parent().removeClass("hiderow").addClass("showrow");
                }
            });
            //Limit by selected module
            var moduleCode = $('.moduleSelect').val();
            if (moduleCode != ""){
                $(".showrow .requestModCode").each(function () {
                    if (String($(this).text()).indexOf(moduleCode) == -1) {
                        $(this).parent().removeClass("showrow").addClass("hiderow");
                    }
                });                
            }
            //Search the comments - Case insensitive
            var searchTerm = $(".commentSearchInput").val().toLowerCase();
            if (searchTerm != "") {
                $(".showrow .requestComments").each(function () {
                    if (String($(this).text().toLowerCase()).indexOf(searchTerm) == -1) {
                        $(this).parent().removeClass("showrow").addClass("hiderow");
                    }
                });
            }
            //If a row that is showing its detail view is hidden, hide the details too
            if ($(".selectedrow").hasClass("hiderow")) {
                $(".selectedrow").removeClass("selectedrow");
                $(".detailsrow").remove();
            }
            //If the refinement has produced no results, add an indicator
            if ($(".showrow").length == 0) {
                $(".RequestTable").append('<tr class="noresults showrow"><td colspan=13>No Request could be found.</td></tr>');
            }
        }
        //Trigger result refinement on any appropriate change
        $(".change-search").change(function () {
            refineResults();
        });
        $(".commentSearchInput").keyup(function () {
            refineResults();
        });
        //NOTE - SUBJECT TO CHANGE
        //NEW METHOD IDEA - ADD DETAILSROW FOR ALL Request, BUT HAVE ALL HIDDEN
        //THEN HAVE THE CLICK SHOW DETAILS ROW INSTEAD OF DYNAMICALLY ADDING AND REMOVING ELEMENTS
        //CHANGE IDEA - 28/04/2014
        //CHANGE DONE - --/--/----
        //Show details for a request underneath it when it is clicked on
        $(".showrow").click(function () {
            if (!$(this).hasClass("selectedrow")) {
                $('.detailsrow').remove();
                $(".selectedrow").removeClass("selectedrow");
                //Pull the request comments from the hidden comment column
                var comment = ($.trim($(this).find(".requestComments").text()) == "") ? "No comments" : String($(this).find(".requestComments").text());
                $(this).addClass("selectedrow").after("<tr class='detailsrow'><td colspan=13><div class='detailsheader'>Comments</div><div class='detailscontent'>" + comment + "</div></td></tr>");
                $.getJSON("@Url.Action("ModuleInfoAPI", "api", null, Request.Url.Scheme)"+"?deptCode=@User.Identity.Name&modCode="+String($(this).find('.requestModCode').attr('data-modCode')))
                .done(function (data) {
                    $(".detailsrow td").prepend("<div class='detailsheader'>Module Title</div><div class='detailscontent'>"+data.Module_Title+"</div>");
                })
                .fail(function (jqXHR, textStatus, err){
                    console.log('Error: ' + err);
                });
            } else {
                $('.detailsrow').remove();
                $(this).removeClass("selectedrow");
            }
        });
        $('.period').each(function () {
            $(this).append(" ("+getTime(parseInt($.trim($(this).text())))+")");
        });
    }
</script>
<h2>Request</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<p>
    <i class="fa fa-info-circle"></i> Click on a request to view it in detail.
</p>
<div class="roundsOptions change-search">
@{
    //Display checkboxes for each round that is it possible for a request to have been made for
    for (var i = 1; i <= ViewBag.currentRoundCode; i++)
    {
        <label style="display:inline-block;margin-bottom:10px;margin-right:10px;">
            <input class="round-@i" checked type="checkbox" />Round @i
            @{
                //Check if the round the checkbox is being shown for is the current round
                //Add an indicator if it is
                if(i==ViewBag.currentRoundCode){
                    <span>(Current)</span>
                }
            }
        </label>
    }
}
</div>
<div>
Module
<select class="moduleSelect change-search">
    <option value="">Choose a module</option>
@{
List<string> moduleList = new List<string>();
foreach (var item in Model.OrderBy(r => r.Module_Code))
{
    string moduleCode = String.Concat(department,item.Module_Code);
    if(!(moduleList.Contains(moduleCode))){
        moduleList.Add(moduleCode);
        <option value="@Html.Raw(moduleCode)">@Html.Raw(department)@Html.DisplayFor(modelItem => item.Module_Code)</option>  
    }
    
}
}
</select>
</div>
<div class="commentSearch">
    Search comments: <input class="commentSearchInput" type="text" />
</div>
<table class="RequestTable">
<thead>
    <tr>
        <th>Module</th>
        <th>Day</th>
        <th>Park</th>
        <th>Booked Block</th>
        <th>Students</th>
        <th>Rooms</th>
        <th>Priority</th>
        <th class="hidecell">Comments</th>
        <th>Comment</th>
        <th>Round</th>
        <th>Status</th>
        <th><i class="fa fa-wrench"></i></th>
    </tr>
</thead>
<tbody>
@foreach (var item in Model)
{
    <tr class="requestRow showrow">
        <td class="requestModCode" data-modCode="@item.Module_Code">
            @Html.Raw(department)@Html.DisplayFor(modelItem => item.Module_Code)
        </td>
        <td>
        @{
        switch (item.Day_ID)
        {
            case 1:
                <span>Mon</span>
                break; 
            case 2:
                <span>Tues</span>
                break;
            case 3:
                <span>Wed</span>
                break;
            case 4:
                <span>Thur</span>
                break;
            case 5:
                <span>Fri</span>
                break;
            case 6:
                <span>Sat</span>
                break;
            case 7:
                <span>Sun</span>
                break;
        }                
        }
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Park_ID)
        </td>
        <td>
            <span class="period">@Html.DisplayFor(modelItem => item.Start_Time)</span>
            -
            <span class="period">@(item.Start_Time + item.Duration)</span>
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Number_Students)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Number_Rooms)
        </td>
        <td>
            @{
        if (item.Priority)
        {
                    <i class="fa fa-check"></i>
        }
        else
        {
                    <i class="fa fa-times"></i>
        }
            }
        </td>
        <td class="requestComments hidecell">
            @Html.DisplayFor(modelItem => item.Custom_Comments)
        </td>
        <td class="">
            @{
                if (!(item.Custom_Comments == null)) {
                    if (item.Custom_Comments.Trim() == "")
                    {
                        <span><i class="fa fa-times"></i></span>
                    }
                    else
                    {
                        <span><i class="fa fa-check"></i></span>
                    }
                }
                else {
                    <span><i class="fa fa-times"></i></span>
                }
            }
        </td>
        <td class="requestRound">
            @Html.DisplayFor(modelItem => item.Current_Round)
        </td>
        <td class="requestControls">
            @{
        switch (item.Request_Status)
        {
            case 1:
                        <span>Pending</span>
                break;
            case 2:
                        <span>Accepted</span>
                break;
            case 3:
                        <span>Failed</span>
                break;
            case 4:
                        <span>Altered</span>
                break;
            default:
                        <span>Unknown</span>
                break;
        }
             }
        </td>
        <td>
            @{
        if (item.Current_Round == ViewBag.CurrentRoundCode)
        {
                    @Html.ActionLink("Edit", "Edit", new { id = item.Request_ID });
                    <span>|</span>
                    @Html.ActionLink("Delete", "Delete", new { id = item.Request_ID });
        }
            }
        </td>
    </tr>
}
</tbody>
</table>
