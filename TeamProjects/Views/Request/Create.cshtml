@model TeamProjects.Models.RequestViewModel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<script>
	var roomPrefCollection = new Array();



	$(document).ready(function () {

		$("#Room_ID").empty();

		$("#Building_ID").change(function () {

			$("#Room_ID").empty();

			findRooms(document.getElementById('Building_ID').options[document.getElementById('Building_ID').selectedIndex].value);

		});

	});

	function addRow(tableID) {

		var table = document.getElementById(tableID);

		var rowCount = table.rows.length;
		var row = table.insertRow(rowCount);

		var cell1 = row.insertCell(0);
		var element1 = document.createElement("input");
		element1.type = "checkbox";
		element1.name = "chkbox[]";
		cell1.appendChild(element1);

		var cell2 = row.insertCell(1);
		cell2.innerHTML = roomPrefCollection[roomPrefCollection.length - 1][0];

		var cell3 = row.insertCell(2);
		cell3.innerHTML = roomPrefCollection[roomPrefCollection.length - 1][1];

		var cell4 = row.insertCell(3);
		cell4.innerHTML = roomPrefCollection[roomPrefCollection.length - 1][2];

		var cell5 = row.insertCell(4);
		cell5.innerHTML = roomPrefCollection[roomPrefCollection.length - 1][3];
	}

	function deleteRowAndPref(tableID) {
		try {
			var table = document.getElementById(tableID);
			var rowCount = table.rows.length;

			for (var i = 0; i < rowCount; i++) {
				var row = table.rows[i];
				var chkbox = row.cells[0].childNodes[0];

				if (null != chkbox && true == chkbox.checked) {
					roomPrefCollection.splice(i, 1);

					table.deleteRow(i);
					rowCount--;
					i--;
				}
			}
		} catch (e) {
			alert(e);
		}
	}

	function addRoomPref() {

		if (document.getElementById('Room_ID').value == "" || document.getElementById('Building_ID').value == "") {
			alert("Please fill in both Building and Room fields before attempting to add a new preference.")
		}

		else if (roomPrefCollection.length > 2) {
			// Already got 3 room preferences. Tell them that they can remove a roompref from the list of already added roomprefs, then add new one.

			alert("The maximum number of room preferences has already been filled. If you wish to add another, please remove an existing room preference.")
		}

		else {
			roomPref = new Array();
			roomPref[0] = document.getElementById('Room_Type').options[document.getElementById('Room_Type').selectedIndex].text;
			roomPref[1] = document.getElementById('Park_ID').options[document.getElementById('Park_ID').selectedIndex].text;
			roomPref[2] = document.getElementById('Building_ID').options[document.getElementById('Building_ID').selectedIndex].text;
			roomPref[3] = document.getElementById('Room_ID').options[document.getElementById('Room_ID').selectedIndex].text;

			roomPrefCollection.push(roomPref);

			// Once added, empty the roompref inputs
			// old table: //document.getElementById("roomChoices").innerHTML = document.getElementById("roomChoices").innerHTML + roomPrefArray[roomPrefCount][0] + " | " + roomPrefArray[roomPrefCount][1] + " | " + roomPrefArray[roomPrefCount][2] + " | " + roomPrefArray[roomPrefCount][3] + "</br>";
			document.getElementById('Room_Type').value = "";
			document.getElementById('Park_ID').value = "";
			document.getElementById('Building_ID').value = "";
			document.getElementById('Room_ID').value = "";

			addRow('dataTable');

			alert("Room preference successfully added!");
		}
	}

	function findRooms(buildingID) {

		$.getJSON("@Url.Action("RoomAPI", "api", null, Request.Url.Scheme)" + '?BuildingID=' + buildingID)
        .done(function (data) {
        	console.log(data);
        	data.forEach(function (entry) {
        		var select = document.getElementById("Room_ID");
        		var option = document.createElement('option');
        		option.text = entry.Room_ID;
        		option.value = entry.Room_ID;
        		select.add(option);
        	});
        })
        .fail(function (jqXHR, textStatus, err) {
        	console.log('Error: ' + err);
        });
	}

	function sendRoomPref() {

		$.ajax({
			type: "POST",
			cache: false,
			url: "/Request/GetRoomPrefCollection",
			//dataType: "json",
			contentType: "application/x-www-form-urlencoded",
			dataType: "html",
			//traditional: true,
			data: {
				roomPrefCollection: JSON.stringify(roomPrefCollection)
			}
		})
			.done(function (data) {
				console.log('WOOT: ' + data);
			})
			.fail(function (jqXHR, textStatus, err) {
				console.log('Error: ' + err);
			});
	}

</script>





@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>timetable_request</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.Module_Code, "Module Code", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Module_Code", String.Empty)
                @Html.ValidationMessageFor(model => model.Module_Code)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Day_ID, "Day", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Day_ID", String.Empty)
                @Html.ValidationMessageFor(model => model.Day_ID)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start_Time, "Start Time", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Start_Time", String.Empty)
                @Html.ValidationMessageFor(model => model.Start_Time)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, "Duration", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Duration", String.Empty)
                @Html.ValidationMessageFor(model => model.Duration)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Number_Students, "Number Of Students", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number_Students)
                @Html.ValidationMessageFor(model => model.Number_Students)
            </div>
        </div>

		<div class="form-group">
			@Html.LabelFor(model => model.Park_ID, "Park Preference", new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("Park_ID", String.Empty)
				@Html.ValidationMessageFor(model => model.Park_ID)
			</div>
		</div>

        <div class="form-group">--Individual Room Preferences--</div>

            <div class="form-group">
                @Html.LabelFor(model => model.Park_ID, "Filter by Park", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Park_ID2", (SelectList) ViewBag.Park_ID, String.Empty)
                    @Html.ValidationMessageFor(model => model.Park_ID)
                </div>
            </div>

		<div class="form-group">
			@Html.LabelFor(model => model.Building_ID, "Building", new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("Building_ID", String.Empty).
				@Html.ValidationMessageFor(model => model.Building_ID)
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Room_Type, "Filter by Room Type", new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("Room_Type", String.Empty)
				@Html.ValidationMessageFor(model => model.Room_Type)
			</div>
		</div>

		<div class="form-group">
			@Html.LabelFor(model => model.Room_ID, "Room", new { @class = "control-label col-md-2" })
			<div class="col-md-10">
				@Html.DropDownList("Room_ID", String.Empty)
				@Html.ValidationMessageFor(model => model.Room_ID)
			</div>
		</div>

        <div class="form-group">---</div>

        <input type="button" value="Add Room Preference" onclick="addRoomPref()" />

        <input type="button" value="Delete Room Preference(s)" onclick="deleteRowAndPref('dataTable')" />

        <table id="dataTable" width="350" border="1">
        </table>

        <div id="roomChoices" class="form-group"></div>
        <div class="form-group">---</div>

            <div class="form-group">
                @Html.LabelFor(model => model.Priority, "Priority", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.CheckBoxFor(model => model.Priority)
                    @Html.ValidationMessageFor(model => model.Priority)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Custom_Comments, "Additional Information", new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Custom_Comments)
                    @Html.ValidationMessageFor(model => model.Custom_Comments)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" onclick="sendRoomPref();" />
                </div>
            </div>
        </div>
}

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

            @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
            }
